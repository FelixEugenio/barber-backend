"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.routes = void 0;
const express_1 = require("express");
const auth_middleware_1 = require("../middlewares/auth.middleware");
const users_controllers_1 = require("../controllers/users.controllers");
const service_controllers_1 = require("../controllers/service.controllers");
const professional_controllers_1 = require("../controllers/professional.controllers");
const appointment_controllers_1 = require("../controllers/appointment.controllers");
const multer_config_1 = __importDefault(require("../config/multer.config"));
const multer_1 = __importDefault(require("multer"));
const controll_exception_1 = __importDefault(require("../helpers/auth/controll.exception"));
const usersControllers = new users_controllers_1.UsersControllers();
const professionalController = new professional_controllers_1.ProfessionalController();
const serviceController = new service_controllers_1.ServiceController();
const appointmentController = new appointment_controllers_1.AppointmentController();
const upload = (0, multer_1.default)(multer_config_1.default.upload("../tmp"));
const routes = (0, express_1.Router)();
exports.routes = routes;
routes.post("/users", (0, controll_exception_1.default)(usersControllers.register));
routes.post('/login', (0, controll_exception_1.default)(usersControllers.login));
routes.get('/profile/:id', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(usersControllers.profile));
routes.get('/logout', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(usersControllers.logout));
routes.get('/unblock/:id', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(usersControllers.unBlock));
routes.get('/block/:id', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(usersControllers.block));
routes.get('/users', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(usersControllers.findAll));
routes.put('/users/:id', auth_middleware_1.isAuthenticated, upload.single("file"), (0, controll_exception_1.default)(usersControllers.update));
routes.delete('/users/delete/:id', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(usersControllers.delete));
routes.post('/professional', auth_middleware_1.isAuthenticated, upload.single("file"), (0, controll_exception_1.default)(professionalController.create));
routes.get('/professionals', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(professionalController.findAll));
routes.get('/professional/:id', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(professionalController.profile));
routes.put('/professional/:id', auth_middleware_1.isAuthenticated, upload.single("file"), (0, controll_exception_1.default)(professionalController.update));
routes.delete('/professional/:id', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(professionalController.delete));
routes.get('/professional/specialty/:specialty', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(professionalController.findBySpecialty));
routes.get('/professional/available', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(professionalController.findByAvailable));
routes.post('/services', auth_middleware_1.isAuthenticated, upload.single("file"), (0, controll_exception_1.default)(serviceController.create));
routes.get('/services', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(serviceController.findAll));
routes.get('/service/:id', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(serviceController.findById));
routes.put('/service/:id', auth_middleware_1.isAuthenticated, upload.single("file"), (0, controll_exception_1.default)(serviceController.update));
routes.delete('/service/:id', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(serviceController.delete));
routes.post('/appointments', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(appointmentController.create));
routes.get('/appointments', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(appointmentController.getAll));
routes.get('/appointment/:id', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(appointmentController.getOne));
routes.put('/appointment/:id', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(appointmentController.update));
routes.delete('/appointment/:id', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(appointmentController.delete));
routes.get('/appointment/cancel/:id', auth_middleware_1.isAuthenticated, (0, controll_exception_1.default)(appointmentController.cancel));
